name: "Multi-Environment Testing"

on:
  workflow_dispatch:  # Manual trigger only - disabled for solo development
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
  # schedule:
  #   - cron: '0 4 * * *'  # Daily at 4 AM UTC

permissions:
  contents: read
  issues: write

jobs:
  test-matrix:
    name: Test on ${{ matrix.os }} with Go ${{ matrix.go-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    if: ${{ !matrix.weekly_only || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Primary testing combination
          - os: ubuntu-latest
            go-version: '1.24.4'
            database: cockroach
          # Previous Go version compatibility
          - os: ubuntu-latest
            go-version: '1.24.3'
            database: cockroach
          # PostgreSQL compatibility (reduced to one)
          - os: ubuntu-22.04
            go-version: '1.24.4'
            database: postgres
          # macOS compatibility (weekly only)
          - os: macos-latest
            go-version: '1.24.4'
            database: postgres
            weekly_only: true
    
    services:
      cockroach:
        image: cockroachdb/cockroach:v24.1.5
        if: matrix.database == 'cockroach'
        env:
          COCKROACH_DATABASE: relay_test
          COCKROACH_USER: root
        options: >-
          --health-cmd="cockroach sql --insecure --execute='SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --memory=512m
          --cpus=0.5
        ports:
          - 26257:26257
      
      postgres:
        image: postgres:15
        if: matrix.database == 'postgres'
        env:
          POSTGRES_DB: relay_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --memory=256m
          --cpus=0.25
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
      
      - name: Set up database connection
        run: |
          if [[ "${{ matrix.database }}" == "cockroach" ]]; then
            echo "DB_HOST=localhost:26257" >> $GITHUB_ENV
            echo "DB_NAME=relay_test" >> $GITHUB_ENV
            echo "DB_USER=root" >> $GITHUB_ENV
            echo "DB_SSLMODE=disable" >> $GITHUB_ENV
            # Wait for CockroachDB
            timeout 60s bash -c 'until nc -z localhost 26257; do sleep 1; done'
            cockroach sql --insecure --host=localhost:26257 --execute="CREATE DATABASE IF NOT EXISTS relay_test;"
          else
            echo "DB_HOST=localhost:5432" >> $GITHUB_ENV
            echo "DB_NAME=relay_test" >> $GITHUB_ENV
            echo "DB_USER=postgres" >> $GITHUB_ENV
            echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
            echo "DB_SSLMODE=disable" >> $GITHUB_ENV
            # Wait for PostgreSQL
            timeout 60s bash -c 'until nc -z localhost 5432; do sleep 1; done'
          fi
      
      - name: Run tests
        env:
          CGO_ENABLED: 1
          RACE_DETECTOR: ${{ matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24.4' }}
        run: |
          if [[ "$RACE_DETECTOR" == "true" ]]; then
            go test -race -v -timeout=30m ./...
          else
            go test -v -timeout=20m ./...
          fi
      
      - name: Run integration tests
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24.4'
        run: |
          # Run NIP compliance tests
          if [[ -d "tests/nips" ]]; then
            cd tests/nips
            for test_script in test_*.sh; do
              if [[ -f "$test_script" ]]; then
                echo "Running $test_script..."
                timeout 300s bash "$test_script" || echo "Test $test_script failed"
              fi
            done
          fi
      
      - name: Collect test artifacts
        if: failure()
        run: |
          mkdir -p test-artifacts
          
          # Collect logs
          if [[ -f "relay.log" ]]; then
            cp relay.log test-artifacts/
          fi
          
          # Collect core dumps (if any)
          find . -name "core*" -type f 2>/dev/null | head -5 | xargs -I {} cp {} test-artifacts/ || true
          
          # System info
          echo "OS: ${{ matrix.os }}" > test-artifacts/system-info.txt
          echo "Go: ${{ matrix.go-version }}" >> test-artifacts/system-info.txt
          echo "Database: ${{ matrix.database }}" >> test-artifacts/system-info.txt
          echo "Timestamp: $(date -u)" >> test-artifacts/system-info.txt
          
          ls -la test-artifacts/ || true
      
      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: test-artifacts-${{ matrix.os }}-go${{ matrix.go-version }}-${{ matrix.database }}
          path: test-artifacts/
          retention-days: 7
  
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: test-matrix
    if: always()
    
    steps:
      - name: Generate test summary
        run: |
          echo "## 🧪 Multi-Environment Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # This would normally analyze the test results
          # For now, we'll create a basic summary
          echo "| Environment | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|---------|" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test-matrix.result }}" == "success" ]]; then
            echo "| All Environments | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Some Environments | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Some tests failed**. Check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Report failures
        if: needs.test-matrix.result == 'failure' && github.event_name == 'schedule'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Scheduled Multi-Environment Tests Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `The scheduled multi-environment tests have failed.
              
              **Run Details:**
              - Workflow: ${context.workflow}
              - Run ID: ${context.runId}
              - Commit: ${context.sha}
              
              Please check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.
              
              This issue was automatically created by the multi-environment testing workflow.`,
              labels: ['bug', 'ci-failure', 'priority-high']
            });