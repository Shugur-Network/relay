name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.3.3-rc.3 or 1.3.3)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional - will auto-generate from commits if empty)'
        required: false
        type: string
      is_prerelease:
        description: 'Mark as pre-release?'
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      
      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected formats: 1.3.3 or 1.3.3-rc.3"
            exit 1
          fi
          echo "✅ Valid version format: $VERSION"
      
      - name: Check if release already exists
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if git tag | grep -q "^v$VERSION$"; then
            echo "❌ Release v$VERSION already exists!"
            exit 1
          fi
          echo "✅ Release v$VERSION does not exist - proceeding"
      
      - name: Update VERSION file
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "$VERSION" > VERSION
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "chore: bump version to $VERSION" || echo "No changes to commit"
      
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          NOTES="${{ github.event.inputs.release_notes }}"
          
          if [[ -z "$NOTES" ]]; then
            echo "📝 Auto-generating release notes..."
            
            # Get last release tag
            LAST_TAG=$(git tag | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -1 || echo "")
            
            if [[ -n "$LAST_TAG" ]]; then
              echo "## What's Changed" > release_notes.md
              echo "" >> release_notes.md
              
              # Get commits since last release
              git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s" >> release_notes.md
              
              echo "" >> release_notes.md
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...v${VERSION}" >> release_notes.md
            else
              echo "## Release v${VERSION}" > release_notes.md
              echo "" >> release_notes.md
              echo "Initial release of Shugur Relay - A high-performance Nostr relay implementation." >> release_notes.md
            fi
          else
            echo "$NOTES" > release_notes.md
          fi
          
          echo "Generated release notes:"
          cat release_notes.md
      
      - name: Create Git tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
      
      - name: Create GitHub Release
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const version = '${{ github.event.inputs.version }}';
            const isPrerelease = ${{ github.event.inputs.is_prerelease }};
            
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');
            
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `Release v${version}`,
              body: releaseNotes,
              prerelease: isPrerelease,
              generate_release_notes: false
            });
            
            console.log(`✅ Created release: ${release.data.html_url}`);
            
            // Update step summary
            core.summary
              .addHeading(`🚀 Release v${version} Created`)
              .addRaw(isPrerelease ? '**Type**: Pre-release' : '**Type**: Stable release')
              .addRaw(`**URL**: ${release.data.html_url}`)
              .addRaw('**Tag**: v' + version)
              .write();
      
      - name: Update release manifest
        if: ${{ !github.event.inputs.is_prerelease }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "{\".\": \"$VERSION\"}" > .release-please-manifest.json
          git add .release-please-manifest.json
          git commit -m "chore: update release manifest to $VERSION" || echo "No changes to commit"
          git push origin main