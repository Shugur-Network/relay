name: CI/CD Pipeline

permissions:
  contents: read

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'announcements/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.svg'
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: "1.24.4"
  REGISTRY: ghcr.io
  IMAGE_NAME: shugur-network/relay

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        with:
          filters: |
            code:
              - 'cmd/**'
              - 'internal/**'
              - 'web/**'
              - 'go.mod'
              - 'go.sum'
              - '!**/*.md'
            docs:
              - '**/*.md'
              - 'docs/**'
              - 'announcements/**'
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [changes]
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache golangci-lint
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ hashFiles('**/go.sum') }}-${{ hashFiles('.golangci.yml', '.golangci.yaml') }}
          restore-keys: |
            ${{ runner.os }}-golangci-lint-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-golangci-lint-

      - name: golangci-lint
        uses: golangci/golangci-lint-action@aaa42aa0628b4ae2578232a66b541047968fac86 # v6.1.0
        with:
          version: latest
          args: --timeout=5m
          skip-cache: true  # We handle caching manually above

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [changes]

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache test dependencies and build cache
        if: ${{ needs.changes.outputs.code == 'true' }}
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-test-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*_test.go') }}
          restore-keys: |
            ${{ runner.os }}-go-test-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-test-

      - name: Download dependencies
        if: ${{ needs.changes.outputs.code == 'true' }}
        run: go mod download

      - name: Start CockroachDB (CI-optimized)
        if: ${{ needs.changes.outputs.code == 'true' }}
        run: |
          docker run -d \
            --name cockroach \
            -p 26257:26257 \
            -p 8080:8080 \
            --memory=512m \
            --cpus=0.5 \
            cockroachdb/cockroach:v24.1.5 \
            start-single-node --insecure --max-sql-memory=50% --cache=128MB

          # Wait for CockroachDB to be ready with optimized timeout
          timeout 45s bash -c 'until docker exec cockroach /cockroach/cockroach sql --insecure --execute="SELECT 1;" > /dev/null 2>&1; do sleep 2; done'
          
          echo "CockroachDB is ready for testing"
          # Database will be created automatically by the relay application

      - name: Run tests with retry mechanism
        if: ${{ needs.changes.outputs.code == 'true' }}
        run: |
          # Run tests with retry for flakiness resilience
          for attempt in 1 2 3; do
            echo "Test attempt $attempt..."
            if go test -v -race -p 4 -coverprofile=coverage.out -timeout=5m ./...; then
              echo "Tests passed on attempt $attempt"
              break
            elif [ $attempt -eq 3 ]; then
              echo "Tests failed after 3 attempts"
              exit 1
            else
              echo "Test attempt $attempt failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
        env:
          SHUGUR_DB_HOST: localhost
          SHUGUR_DB_PORT: 26257
          SHUGUR_DB_USER: root
          SHUGUR_DB_SSL_MODE: disable

      - name: Run benchmarks for performance monitoring
        if: ${{ needs.changes.outputs.code == 'true' }}
        run: |
          echo "Running performance benchmarks..."
          go test -bench=. -benchmem -count=3 -run=^$ ./... > benchmarks.txt 2>&1 || true
          
          # Display benchmark results
          if [ -f benchmarks.txt ] && [ -s benchmarks.txt ]; then
            echo "Benchmark Results:"
            cat benchmarks.txt | grep -E "(Benchmark|PASS|FAIL)" | head -20
          else
            echo "No benchmarks found or benchmarks failed to run"
          fi

      - name: Upload coverage to Codecov
        if: ${{ needs.changes.outputs.code == 'true' }}
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v5.0.4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload benchmark results
        if: ${{ needs.changes.outputs.code == 'true' }}
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: benchmark-results
          path: benchmarks.txt
          retention-days: 30

      - name: Docs-only change; skip tests
        if: ${{ needs.changes.outputs.code != 'true' }}
        run: echo "Docs-only change detected; skipping tests."

      - name: Cleanup
        if: always()
        run: |
          docker stop cockroach || true
          docker rm cockroach || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [changes]
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run comprehensive security checks
        run: |
          # Run go vet for basic security issues
          go vet ./...

          # Check for potential security issues in dependencies
          go mod why

          # Run staticcheck for advanced static analysis
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

          # Run govulncheck for known vulnerabilities
          echo "Running vulnerability check..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

          # Check for secrets and sensitive information
          if command -v git >/dev/null 2>&1; then
            echo "Scanning for potential secrets in code..."
            git log --all --full-history -- "*.go" "*.yaml" "*.yml" "*.json" | grep -i -E "(password|secret|key|token|api)" | head -10 || true
          fi

  build:
    name: Build (release artifacts)
    runs-on: ubuntu-latest
    needs: [lint, test]
    # Only build cross-platform artifacts on releases
    if: github.event_name == 'release'
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Validate SemVer and VERSION for releases
        if: github.event_name == 'release'
        run: |
          VFILE=$(cat VERSION 2>/dev/null || echo '')
          TAG="${GITHUB_REF_NAME#v}"
          SEMVER_RE='^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?(\+[0-9A-Za-z.-]+)?$'
          if ! echo "$TAG" | grep -Eq "$SEMVER_RE"; then
            echo "Tag must be SemVer (optionally v-prefixed); got '${GITHUB_REF_NAME}'" >&2; exit 1; fi
          # For stable releases (no hyphen), enforce VERSION equality; pre-releases skip equality
          if echo "$TAG" | grep -q '-'; then
            echo "Pre-release tag '$TAG' detected; skipping VERSION equality check."
          else
            if ! echo "$VFILE" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
              echo "VERSION must be X.Y.Z for stable releases; got '$VFILE'" >&2; exit 1; fi
            if [ "$VFILE" != "$TAG" ]; then
              echo "VERSION ($VFILE) does not match tag ($TAG)" >&2; exit 1; fi
          fi

      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        run: |
          mkdir -p dist
          # On release events, use the tag as version (pre-release or stable)
          VERSION="${GITHUB_REF_NAME#v}"
          BINARY_NAME=relay
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build \
            -ldflags "-w -s -X main.version=${VERSION} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o dist/${BINARY_NAME}-${{ matrix.goos }}-${{ matrix.goarch }} \
            ./cmd

      - name: Upload build artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: relay-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/
          retention-days: 7  # Reduced from 30 days for releases

  docker:
    name: Docker Build & Push (release)
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    # Only publish Docker images on releases
    if: github.event_name == 'release'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1

      - name: Log in to Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate SemVer and VERSION for releases
        run: |
          VFILE=$(cat VERSION 2>/dev/null || echo '')
          TAG="${GITHUB_REF_NAME#v}"
          SEMVER_RE='^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?(\+[0-9A-Za-z.-]+)?$'
          if ! echo "$TAG" | grep -Eq "$SEMVER_RE"; then
            echo "Tag must be SemVer (optionally v-prefixed); got '${GITHUB_REF_NAME}'" >&2; exit 1; fi
          if echo "$TAG" | grep -q '-'; then
            echo "Pre-release tag '$TAG' detected; skipping VERSION equality check."
          else
            if ! echo "$VFILE" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
              echo "VERSION must be X.Y.Z for stable releases; got '$VFILE'" >&2; exit 1; fi
            if [ "$VFILE" != "$TAG" ]; then
              echo "VERSION ($VFILE) does not match tag ($TAG)" >&2; exit 1; fi
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}},enable=${{ !github.event.release.prerelease }}
            type=semver,pattern={{major}},enable=${{ !github.event.release.prerelease }}
            type=raw,value=latest,enable=${{ !github.event.release.prerelease }}
      
      - name: Compute version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85 # v6.7.0
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            COMMIT=${{ github.sha }}
            DATE=${{ github.event.head_commit.timestamp }}
          target: production

  release:
    name: Release Assets
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'release'
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Validate SemVer and VERSION for releases
        run: |
          VFILE=$(cat VERSION 2>/dev/null || echo '')
          TAG="${GITHUB_REF_NAME#v}"
          SEMVER_RE='^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?(\+[0-9A-Za-z.-]+)?$'
          if ! echo "$TAG" | grep -Eq "$SEMVER_RE"; then
            echo "Tag must be SemVer (optionally v-prefixed); got '${GITHUB_REF_NAME}'" >&2; exit 1; fi
          if echo "$TAG" | grep -q '-'; then
            echo "Pre-release tag '$TAG' detected; skipping VERSION equality check."
          else
            if ! echo "$VFILE" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
              echo "VERSION must be X.Y.Z for stable releases; got '$VFILE'" >&2; exit 1; fi
            if [ "$VFILE" != "$TAG" ]; then
              echo "VERSION ($VFILE) does not match tag ($TAG)" >&2; exit 1; fi
          fi

      - name: Download build artifacts (relay-*)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          # Only fetch our binary artifacts, skip docker/buildx artifacts
          pattern: relay-*
          path: ./artifacts
          merge-multiple: true

      - name: Prepare and package release assets
        run: |
          set -euo pipefail
          mkdir -p release
          # Gather raw binaries from all artifacts
          if compgen -G "artifacts/relay-*" > /dev/null; then
            cp artifacts/relay-* release/
          else
            for dir in artifacts/*/; do
              if [ -d "$dir" ]; then
                cp -r "$dir"* release/
              fi
            done
          fi

          cd release
          mkdir -p archives

          # Ensure zip is available for Windows archives
          if ! command -v zip >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y zip
          fi

          # Package per target: .zip for Windows, .tar.gz for others
          for f in *; do
            # skip directories and previously generated files
            if [ -d "$f" ] || [[ "$f" == "archives" ]] || [[ "$f" == *.zip ]] || [[ "$f" == *.tar.gz ]] || [[ "$f" == "checksums.txt" ]]; then
              continue
            fi

            case "$f" in
              *windows-*)
                arch="${f##*-}"              # last hyphen token
                out="archives/relay-windows-${arch}.zip"
                # Normalize name inside archive to relay.exe
                cp "$f" relay.exe
                if command -v zip >/dev/null 2>&1; then
                  zip -q -9 "$out" relay.exe
                else
                  echo "zip not found" >&2; exit 1
                fi
                rm -f relay.exe
                ;;
              *)
                arch="${f##*-}"
                os="${f%-*}"; os="${os##*-}"
                out="archives/relay-${os}-${arch}.tar.gz"
                # Normalize name inside archive to relay
                cp "$f" relay
                tar -czf "$out" relay
                rm -f relay
                ;;
            esac
          done

          # Create checksums for archives
          (cd archives && sha256sum * > ../checksums.txt)

      # Docker images are built and pushed in the docker job (release)

      - name: Log in to Container Registry (read)
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Attach Docker images to release (uncompressed)
        env:
          IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        run: |
          set -euo pipefail
          mkdir -p release/containers
          TAG="${GITHUB_REF_NAME#v}"
          # pull and save platform-specific images as raw docker tar (no compression)
          docker pull --platform=linux/amd64 "${IMAGE}:${TAG}"
          docker save "${IMAGE}:${TAG}" -o "release/containers/relay-${TAG}-linux-amd64.tar"
          docker pull --platform=linux/arm64 "${IMAGE}:${TAG}"
          docker save "${IMAGE}:${TAG}" -o "release/containers/relay-${TAG}-linux-arm64.tar"

      - name: Upload release assets
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          files: |
            release/*
            release/archives/*
            release/containers/*
          generate_release_notes: true

  build-pr:
    name: Build (PR linux/amd64)
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary (linux/amd64)
        run: |
          mkdir -p dist
          VERSION=$(cat VERSION 2>/dev/null || echo "dev")
          GOOS=linux GOARCH=amd64 go build \
            -ldflags "-w -s -X main.version=${VERSION} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o dist/relay-linux-amd64 \
            ./cmd

  # Build Result Aggregation (inspired by AutoMQ)
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [test, build, security, lint]
    if: always()
    steps:
      - name: Check build results
        run: |
          echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each job status
          TEST_STATUS="${{ needs.test.result }}"
          BUILD_STATUS="${{ needs.build.result }}"
          SECURITY_STATUS="${{ needs.security.result }}"
          LINT_STATUS="${{ needs.lint.result }}"
          
          echo "| Job | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Test results
          case "$TEST_STATUS" in
            "success") echo "| 🧪 Tests | ✅ Passed | All tests completed successfully |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| 🧪 Tests | ⏭️ Skipped | Tests were skipped |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 🧪 Tests | ❌ Failed | Tests failed or had issues |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Build results
          case "$BUILD_STATUS" in
            "success") echo "| 🏗️ Build | ✅ Passed | Binary compiled successfully |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| 🏗️ Build | ⏭️ Skipped | Build was skipped |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 🏗️ Build | ❌ Failed | Build compilation failed |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Security results
          case "$SECURITY_STATUS" in
            "success") echo "| 🔒 Security | ✅ Passed | No security issues found |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| 🔒 Security | ⏭️ Skipped | Security scan was skipped |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 🔒 Security | ❌ Failed | Security scan found issues |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Lint results
          case "$LINT_STATUS" in
            "success") echo "| 📝 Lint | ✅ Passed | Code meets quality standards |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| 📝 Lint | ⏭️ Skipped | Linting was skipped |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 📝 Lint | ❌ Failed | Code quality issues found |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status - consider success and skipped as passing
          FAILED_JOBS=0
          [[ "$TEST_STATUS" != "success" && "$TEST_STATUS" != "skipped" ]] && ((FAILED_JOBS++))
          [[ "$BUILD_STATUS" != "success" && "$BUILD_STATUS" != "skipped" ]] && ((FAILED_JOBS++))
          [[ "$SECURITY_STATUS" != "success" && "$SECURITY_STATUS" != "skipped" ]] && ((FAILED_JOBS++))
          [[ "$LINT_STATUS" != "success" && "$LINT_STATUS" != "skipped" ]] && ((FAILED_JOBS++))
          
          if [[ $FAILED_JOBS -eq 0 ]]; then
            echo "## ✅ Overall Status: **PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "All checks completed successfully. Ready to merge!" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "## ❌ Overall Status: **FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "One or more checks failed. Please review the issues above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
