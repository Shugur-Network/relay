name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  GO_VERSION: "1.24.1"
  REGISTRY: ghcr.io
  IMAGE_NAME: shugur-network/relay

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Prepare module cache
        run: |
          # Ensure clean state for module cache
          mkdir -p ~/go/pkg/mod
          chmod -R u+w ~/go/pkg/mod 2>/dev/null || true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
        continue-on-error: true

      - name: Clean module cache on conflict
        if: failure()
        run: go clean -modcache

      - name: Download dependencies
        run: go mod download

      - name: Start CockroachDB
        run: |
          docker run -d \
            --name cockroach \
            -p 26257:26257 \
            -p 8080:8080 \
            cockroachdb/cockroach:v24.1.5 \
            start-single-node --insecure

          # Wait for CockroachDB to be ready
          timeout 60s bash -c 'until docker exec cockroach /cockroach/cockroach sql --insecure --execute="SELECT 1;" > /dev/null 2>&1; do sleep 2; done'

          # Database will be created automatically by the relay application

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
        env:
          SHUGUR_DB_HOST: localhost
          SHUGUR_DB_PORT: 26257
          SHUGUR_DB_USER: root
          SHUGUR_DB_SSL_MODE: disable

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Cleanup
        if: always()
        run: |
          docker stop cockroach || true
          docker rm cockroach || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Basic Security Checks
        run: |
          # Run go vet for basic security issues
          go vet ./...

          # Check for potential security issues in dependencies
          go mod why

          # Run staticcheck for advanced static analysis
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        run: |
          mkdir -p dist
          VERSION=$(cat VERSION 2>/dev/null || echo "dev")
          BINARY_NAME=relay
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build \
            -ldflags "-w -s -X main.version=${VERSION} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o dist/${BINARY_NAME}-${{ matrix.goos }}-${{ matrix.goarch }} \
            ./cmd

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: relay-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/
          retention-days: 30

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Read VERSION file
        id: version
        run: echo "VERSION=$(cat VERSION 2>/dev/null || echo 'dev')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            COMMIT=${{ github.sha }}
            DATE=${{ github.event.head_commit.timestamp }}
          target: production

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'release'
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              cp -r "$dir"* release/
            fi
          done

          # Create checksums
          cd release
          sha256sum * > checksums.txt

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          generate_release_notes: true

      # Build and push release Docker images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract release metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=stable

      - name: Read VERSION file
        id: version
        run: echo "VERSION=$(cat VERSION 2>/dev/null || echo '${{ github.ref_name }}')" >> $GITHUB_OUTPUT

      - name: Build and push release Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            COMMIT=${{ github.sha }}
            DATE=${{ github.event.head_commit.timestamp }}
          target: production
