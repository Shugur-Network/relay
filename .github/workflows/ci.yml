name: CI & Release

permissions:
  contents: write
  packages: write
  pull-requests: write

on:
  push:
    branches: [main, develop]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*' # Matches v1.2.3, v1.2.3-rc1, etc.
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'announcements/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.svg'
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: "1.24.4"
  REGISTRY: ghcr.io
  IMAGE_NAME: shugur-network/relay

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
      docs: ${{ steps.filter.outputs.docs }}
      is_tag: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        with:
          filters: |
            code:
              - 'cmd/**'
              - 'internal/**'
              - 'web/**'
              - 'go.mod'
              - 'go.sum'
              - '!**/*.md'
            docs:
              - '**/*.md'
              - 'docs/**'
              - 'announcements/**'
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.code == 'true'
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache golangci-lint
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ hashFiles('**/go.sum') }}-${{ hashFiles('.golangci.yml', '.golangci.yaml') }}
          restore-keys: |
            ${{ runner.os }}-golangci-lint-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-golangci-lint-

      - name: golangci-lint
        uses: golangci/golangci-lint-action@aaa42aa0628b4ae2578232a66b541047968fac86 # v6.1.0
        with:
          version: latest
          args: --timeout=5m
          skip-cache: true  # We handle caching manually above

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.code == 'true'

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache test dependencies and build cache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-test-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*_test.go') }}
          restore-keys: |
            ${{ runner.os }}-go-test-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-test-

      - name: Download dependencies
        run: go mod download

      - name: Start CockroachDB (CI-optimized)
        run: |
          docker run -d \
            --name cockroach \
            -p 26257:26257 \
            -p 8080:8080 \
            --memory=512m \
            --cpus=0.5 \
            cockroachdb/cockroach:v24.1.5 \
            start-single-node --insecure --max-sql-memory=50% --cache=128MB

          # Wait for CockroachDB to be ready with optimized timeout
          timeout 45s bash -c 'until docker exec cockroach /cockroach/cockroach sql --insecure --execute="SELECT 1;" > /dev/null 2>&1; do sleep 2; done'
          
          echo "CockroachDB is ready for testing"
          # Database will be created automatically by the relay application

      - name: Run tests with retry mechanism
        run: |
          # Run tests with retry for flakiness resilience
          for attempt in 1 2 3; do
            echo "Test attempt $attempt..."
            if go test -v -race -p 4 -coverprofile=coverage.out -timeout=5m ./...; then
              echo "Tests passed on attempt $attempt"
              break
            elif [ $attempt -eq 3 ]; then
              echo "Tests failed after 3 attempts"
              exit 1
            else
              echo "Test attempt $attempt failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
        env:
          SHUGUR_DB_HOST: localhost
          SHUGUR_DB_PORT: 26257
          SHUGUR_DB_USER: root
          SHUGUR_DB_SSL_MODE: disable

      - name: Run benchmarks for performance monitoring
        run: |
          echo "Running performance benchmarks..."
          go test -bench=. -benchmem -count=3 -run=^$ ./... > benchmarks.txt 2>&1 || true
          
          # Display benchmark results
          if [ -f benchmarks.txt ] && [ -s benchmarks.txt ]; then
            echo "Benchmark Results:"
            cat benchmarks.txt | grep -E "(Benchmark|PASS|FAIL)" | head -20
          else
            echo "No benchmarks found or benchmarks failed to run"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v5.0.4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload benchmark results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: benchmark-results
          path: benchmarks.txt
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          docker stop cockroach || true
          docker rm cockroach || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.code == 'true'
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run comprehensive security checks
        run: |
          # Run go vet for basic security issues
          go vet ./...

          # Check for potential security issues in dependencies
          go mod why

          # Run staticcheck for advanced static analysis
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

          # Run govulncheck for known vulnerabilities
          echo "Running vulnerability check..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

          # Check for secrets and sensitive information
          if command -v git >/dev/null 2>&1; then
            echo "Scanning for potential secrets in code..."
            git log --all --full-history -- "*.go" "*.yaml" "*.yml" "*.json" | grep -i -E "(password|secret|key|token|api)" | head -10 || true
          fi

  build-pr:
    name: Build (PR)
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary (linux/amd64)
        run: |
          mkdir -p dist
          VERSION=$(cat VERSION 2>/dev/null || echo "dev")
          GOOS=linux GOARCH=amd64 go build \
            -ldflags "-w -s -X main.version=${VERSION} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o dist/relay-linux-amd64 \
            ./cmd

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: needs.changes.outputs.is_tag == 'true'
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Need full history for release notes

      - name: Validate Git Tag vs. VERSION file
        run: |
          TAG_VERSION=${GITHUB_REF_NAME#v}
          FILE_VERSION=$(cat VERSION)
          echo "Git Tag Version: $TAG_VERSION"
          echo "VERSION File: $FILE_VERSION"
          if [[ "$TAG_VERSION" != "$FILE_VERSION" ]]; then
            echo "Error: Git tag version ($TAG_VERSION) does not match VERSION file ($FILE_VERSION)."
            exit 1
          fi

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build multi-platform binaries
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          COMMIT=${{ github.sha }}
          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          mkdir -p dist
          
          declare -a platforms=(
            "linux/amd64"
            "linux/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
          )
          
          for platform in "${platforms[@]}"; do
            IFS='/' read -r GOOS GOARCH <<< "$platform"
            BINARY_NAME="relay"
            if [ "$GOOS" = "windows" ]; then
              BINARY_NAME="${BINARY_NAME}.exe"
            fi
            
            echo "🔨 Building $GOOS/$GOARCH..."
            GOOS=$GOOS GOARCH=$GOARCH go build \
              -ldflags "-w -s -X main.version=${VERSION} -X main.commit=${COMMIT} -X main.date=${BUILD_DATE}" \
              -o dist/relay-${GOOS}-${GOARCH}${BINARY_NAME#relay} \
              ./cmd
          done

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.GITHUB_REF_NAME }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=Shugur Relay
            org.opencontainers.image.description=High-performance Nostr relay
            org.opencontainers.image.version=${{ env.GITHUB_REF_NAME }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ env.GITHUB_REF_NAME }}
            COMMIT=${{ github.sha }}
          target: production

      - name: Create compressed archives and checksums
        run: |
          cd dist
          for file in relay-*; do
            if [[ $file == *"windows"* ]]; then
              zip "${file}.zip" "$file"
            else
              tar -czf "${file}.tar.gz" "$file"
            fi
          done
          sha256sum ./* > checksums.txt
          cd ..

      - name: Create GitHub Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        with:
          files: |
            dist/*.zip
            dist/*.tar.gz
            dist/checksums.txt
          generate_release_notes: true
          
  # Build Result Aggregation (inspired by AutoMQ)
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [test, build-pr, security, lint, release]
    if: always()
    steps:
      - name: Check build results
        run: |
          echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each job status
          TEST_STATUS="${{ needs.test.result }}"
          BUILD_PR_STATUS="${{ needs.build-pr.result }}"
          SECURITY_STATUS="${{ needs.security.result }}"
          LINT_STATUS="${{ needs.lint.result }}"
          RELEASE_STATUS="${{ needs.release.result }}"
          
          echo "| Job | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Test results
          case "$TEST_STATUS" in
            "success") echo "| 🧪 Tests | ✅ Passed | All tests completed successfully |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| 🧪 Tests | ⏭️ Skipped | Tests were skipped |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| 🧪 Tests | ❌ Failed | Tests failed or had issues |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 🧪 Tests | ❔ Unknown | Status was ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Build PR results
          case "$BUILD_PR_STATUS" in
            "success") echo "| 🏗️ Build (PR) | ✅ Passed | Binary compiled successfully |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| 🏗️ Build (PR) | ⏭️ Skipped | Build was skipped (not a PR) |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| 🏗️ Build (PR) | ❌ Failed | Build compilation failed |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 🏗️ Build (PR) | ❔ Unknown | Status was ${{ needs.build-pr.result }} |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Security results
          case "$SECURITY_STATUS" in
            "success") echo "| 🔒 Security | ✅ Passed | No security issues found |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| 🔒 Security | ⏭️ Skipped | Security scan was skipped |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| 🔒 Security | ❌ Failed | Security scan found issues |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 🔒 Security | ❔ Unknown | Status was ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Lint results
          case "$LINT_STATUS" in
            "success") echo "| 📝 Lint | ✅ Passed | Code meets quality standards |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| 📝 Lint | ⏭️ Skipped | Linting was skipped |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| 📝 Lint | ❌ Failed | Code quality issues found |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 📝 Lint | ❔ Unknown | Status was ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY ;;
          esac

          # Release results
          case "$RELEASE_STATUS" in
            "success") echo "| 🚀 Release | ✅ Passed | Release created successfully |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| 🚀 Release | ⏭️ Skipped | Release was skipped (not a tag) |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| 🚀 Release | ❌ Failed | Release creation failed |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 🚀 Release | ❔ Unknown | Status was ${{ needs.release.result }} |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          FAILED_JOBS=0
          [[ "$TEST_STATUS" == "failure" ]] && ((FAILED_JOBS++))
          [[ "$BUILD_PR_STATUS" == "failure" ]] && ((FAILED_JOBS++))
          [[ "$SECURITY_STATUS" == "failure" ]] && ((FAILED_JOBS++))
          [[ "$LINT_STATUS" == "failure" ]] && ((FAILED_JOBS++))
          [[ "$RELEASE_STATUS" == "failure" ]] && ((FAILED_JOBS++))
          
          if [[ $FAILED_JOBS -eq 0 ]]; then
            echo "## ✅ Overall Status: **PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "All checks completed successfully." >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "## ❌ Overall Status: **FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "One or more checks failed. Please review the issues above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
