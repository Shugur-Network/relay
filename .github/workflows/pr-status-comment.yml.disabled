name: PR Status Comment

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]

permissions:
  contents: read
  pull-requests: write

jobs:
  comment:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request'
    steps:
      - name: Download PR artifacts
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "benchmark-results"
            })[0];
            
            if (matchArtifact) {
              let download = await github.rest.actions.downloadArtifact({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 artifact_id: matchArtifact.id,
                 archive_format: 'zip',
              });
              let fs = require('fs');
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/benchmark-results.zip`, Buffer.from(download.data));
            }

      - name: Extract and comment on PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get PR number from workflow run
            const prNumber = context.payload.workflow_run.pull_requests[0]?.number;
            if (!prNumber) {
              console.log('No PR number found');
              return;
            }
            
            const conclusion = context.payload.workflow_run.conclusion;
            const runUrl = context.payload.workflow_run.html_url;
            const headSha = context.payload.workflow_run.head_sha.substring(0, 7);
            
            let statusEmoji = conclusion === 'success' ? '✅' : '❌';
            let statusText = conclusion === 'success' ? 'passed' : 'failed';
            
            let commentBody = `## ${statusEmoji} CI Pipeline ${statusText} (${headSha})
            
            **Workflow Run:** [View Details](${runUrl})
            **Commit:** \`${headSha}\`
            `;
            
            // Try to add benchmark info if available
            try {
              if (fs.existsSync('benchmarks.txt')) {
                const benchmarks = fs.readFileSync('benchmarks.txt', 'utf8');
                const benchmarkLines = benchmarks.split('\n')
                  .filter(line => line.includes('Benchmark'))
                  .slice(0, 10);
                
                if (benchmarkLines.length > 0) {
                  commentBody += `
            ### 📊 Performance Benchmarks
            \`\`\`
            ${benchmarkLines.join('\n')}
            \`\`\`
            `;
                }
              }
            } catch (error) {
              console.log('No benchmark results found');
            }
            
            commentBody += `
            ---
            *This comment was automatically generated by the CI pipeline.*`;
            
            // Check for existing comments to update instead of creating new ones
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('CI Pipeline') && comment.user.type === 'Bot'
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }