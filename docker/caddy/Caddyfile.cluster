# Caddyfile for Shugur Relay Cluster
# Multi-node cluster configuration with load balancing
# This file should be used when setting up a load balancer in front of multiple cluster nodes

# Main cluster endpoint with load balancing
cluster.yourdomain.com {
    # Load balance across all cluster nodes
    reverse_proxy {
        # Add your cluster nodes here
        to relay1.yourdomain.com:443
        to relay2.yourdomain.com:443
        to relay3.yourdomain.com:443
        
        # Health checking
        health_uri /health
        health_interval 30s
        health_timeout 10s
        
        # Load balancing policy
        lb_policy random
        
        # Failover settings
        fail_duration 30s
        max_fails 3
        
        # Headers for backend communication
        header_up Host {upstream_hostport}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Proto {scheme}
        header_up X-Cluster-Request "true"
    }
    
    # Security headers
    header {
        # Security headers
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "SAMEORIGIN"
        Referrer-Policy "strict-origin-when-cross-origin"
        X-Cluster-Mode "load-balanced"
        
        # Remove server info
        -Server
        -X-Powered-By
    }
    
    # Enable compression
    encode gzip zstd
    
    # Rate limiting (optional)
    rate_limit {
        zone cluster {
            key {remote_ip}
            events 1000
            window 1h
        }
    }
    
    # Logging
    log {
        output file /var/log/caddy/cluster-access.log {
            roll_size 100mb
            roll_keep 10
        }
        format json
    }
}

# Individual node endpoints (for direct access if needed)
relay1.yourdomain.com {
    reverse_proxy localhost:8080 {
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Proto {scheme}
        header_up X-Direct-Node "node1"
    }
    
    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "SAMEORIGIN"
        Referrer-Policy "strict-origin-when-cross-origin"
        X-Node-ID "node1"
        -Server
        -X-Powered-By
    }
    
    encode gzip zstd
}

relay2.yourdomain.com {
    reverse_proxy localhost:8080 {
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Proto {scheme}
        header_up X-Direct-Node "node2"
    }
    
    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "SAMEORIGIN"
        Referrer-Policy "strict-origin-when-cross-origin"
        X-Node-ID "node2"
        -Server
        -X-Powered-By
    }
    
    encode gzip zstd
}

relay3.yourdomain.com {
    reverse_proxy localhost:8080 {
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Proto {scheme}
        header_up X-Direct-Node "node3"
    }
    
    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "SAMEORIGIN"
        Referrer-Policy "strict-origin-when-cross-origin"
        X-Node-ID "node3"
        -Server
        -X-Powered-By
    }
    
    encode gzip zstd
}

# Health check endpoint for the entire cluster
:8090 {
    handle /cluster/health {
        # Check if at least one node is healthy
        reverse_proxy {
            to relay1.yourdomain.com:443/health
            to relay2.yourdomain.com:443/health
            to relay3.yourdomain.com:443/health
            
            health_uri /health
            health_interval 10s
            health_timeout 5s
            
            lb_policy first
            fail_duration 10s
            max_fails 1
        }
    }
    
    handle /health {
        respond "Cluster Load Balancer OK" 200
    }
}
