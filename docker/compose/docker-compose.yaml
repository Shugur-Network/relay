services:
  caddy:
    image: caddy:2-alpine
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - ./logs/caddy:/var/log/caddy
    networks:
      - shunet
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:2019/config/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    dns:
      - 8.8.8.8
      - 8.8.4.4
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  relay:
    image: relay:latest
    depends_on:
      ipfs:
        condition: service_healthy
      caddy:
        condition: service_healthy
    build:
      context: ../..
      dockerfile: docker/Dockerfile
    container_name: shugur
    env_file:
      - .env
    volumes:
      - ds_volume:/app
      - ./config.yaml:/app/config.yaml
    environment:
      - VIRTUAL_HOST=shu01.shugur.net
      - VIRTUAL_PORT=8080
      - AUTO_ONBOARD=true
    restart: unless-stopped
    ports:
      - "4656:4656/tcp"
      - "4656:4656/udp"
      - "8181:8181"
    networks:
      - shunet
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

networks:
  shunet:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.19.0.0/16
    driver_opts:
      com.docker.network.bridge.name: shunet
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.bridge.mtu: "1500"

volumes:
  ds_volume:
    driver: local
  ipfs_volume:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
