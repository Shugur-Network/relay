# Shugur Distributed  Relay - Multi-Node Docker Compose
# This is a reference template for a complete 3-node cluster setup
# Generated files are created automatically by install.distributed.sh

version: '3.8'

# Node 1 Configuration
services:
  # CockroachDB Node 1
  cockroachdb-node1:
    image: cockroachdb/cockroach:latest
    container_name: cockroachdb-node1
    hostname: cockroachdb-node1
    command: start --certs-dir=/cockroach/cockroach-certs --advertise-addr=node1.example.com:26257 --join=node1.example.com:26257,node2.example.com:26257,node3.example.com:26257 --cache=25% --max-sql-memory=25%
    volumes:
      - cockroach_data_node1:/cockroach/cockroach-data
      - ./certs:/cockroach/cockroach-certs:ro
      - ./logs/cockroachdb:/cockroach/logs
    ports:
      - "26257:26257"  # SQL port
      - "26258:26258"  # Inter-node communication
      - "9090:8080"    # Admin UI
    environment:
      - COCKROACH_SKIP_ENABLING_DIAGNOSTIC_REPORTING=true
    healthcheck:
      test: ["CMD", "/cockroach/cockroach", "sql", "--certs-dir=/cockroach/cockroach-certs", "--host=localhost:26257", "--execute=SELECT 1;"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
      restart: unless-stopped
    networks:
      - distributed_network

  # Relay Service Node 1
  relay-node1:
    image: ghcr.io/shugur-network/relay:latest
    container_name: relay-node1
    hostname: relay-node1
    restart: unless-stopped
    environment:
      - SHUGUR_ENV=production
      - SHUGUR_DB_HOST=localhost
      - SHUGUR_DB_PORT=26257
      - SHUGUR_DB_USER=relay
      - SHUGUR_DB_SSL_MODE=require
      - SHUGUR_LOG_LEVEL=info
      - SHUGUR_LOG_FORMAT=json
      - SHUGUR_METRICS_ENABLED=true
      - SHUGUR_WS_PORT=8080
      - SHUGUR_METRICS_PORT=8181
      - SHUGUR_MAX_CONNECTIONS=2000
      - SHUGUR_NODE=node1
    volumes:
      - ./config/config.yaml:/app/config.yaml:ro
      - ./certs:/app/certs:ro
      - ./logs/relay:/app/logs
    depends_on:
      cockroachdb-node1:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      restart: unless-stopped
    network_mode: host

  # Caddy Reverse Proxy Node 1
  caddy-node1:
    image: caddy:latest
    container_name: caddy-node1
    hostname: caddy-node1
    restart: unless-stopped
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
      - "8090:8090"  # Health check
    volumes:
      - ./config/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data_node1:/data
      - caddy_config_node1:/config
      - ./logs/caddy:/var/log/caddy
    depends_on:
      - relay-node1
    healthcheck:
      test: ["CMD", "caddy", "validate", "--config", "/etc/caddy/Caddyfile"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
      restart: unless-stopped
    networks:
      - distributed_network

volumes:
  cockroach_data_node1:
    driver: local
  caddy_data_node1:
    driver: local
  caddy_config_node1:
    driver: local

networks:
  distributed_network:
    driver: bridge

# Additional nodes would have similar configurations with:
# - Different node IDs (node2, node3, etc.)
# - Different hostnames and container names
# - Same cluster join string
# - Unique volume names
# - Same network configuration

# Example for Node 2:
# cockroachdb-node2:
#   image: cockroachdb/cockroach:v22.2.7
#   container_name: cockroachdb-node2
#   hostname: cockroachdb-node2
#   command: start --certs-dir=/cockroach/cockroach-certs --advertise-addr=cockroachdb-node2:26257 --join=cockroachdb-node1:26257,cockroachdb-node2:26257,cockroachdb-node3:26257
#   volumes:
#     - cockroach_data_node2:/cockroach/cockroach-data

# Example for Node 3:
# cockroachdb-node3:
#   command: start --certs-dir=/cockroach/cockroach-certs --advertise-addr=node3.example.com:26257 --join=node1.example.com:26257,node2.example.com:26257,node3.example.com:26257
#   volumes:
#     - cockroach_data_node3:/cockroach/cockroach-data
